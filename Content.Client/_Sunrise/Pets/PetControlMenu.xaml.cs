using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared.Popups;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Numerics;
using Content.Shared._Sunrise.Pets;
using Content.Shared._Sunrise.Pets.Prototypes;
using Robust.Client.AutoGenerated;

namespace Content.Client._Sunrise.Pets;

[GenerateTypedNameReferences]
public sealed partial class PetControlMenu : RadialMenu
{
    [Dependency] private readonly EntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;

    private SharedPopupSystem _popup;
    private SpriteSystem _sprites;

    public event Action<PetBaseEvent>? SendPetSystemMessageAction;

    private EntityUid _owner;

    public PetControlMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _popup = _entManager.System<SharedPopupSystem>();
        _sprites = _entManager.System<SpriteSystem>();

        OnChildAdded += AddPetControlMenuButtonOnClickActions;
    }

    public void SetEntity(EntityUid uid)
    {
        _owner = uid;
        Refresh();
    }

    public void Refresh()
    {
        // Find the main radial container
        var main = FindControl<RadialContainer>("Main");

        // Populate secondary radial containers
        if (!_entManager.TryGetComponent<PettableOnInteractComponent>(_owner, out var pettable))
            return;

        SetupCategories(main, pettable);

        foreach (var protoId in pettable.AvailableControls)
        {
            if (!_protoManager.TryIndex(protoId, out var proto))
                continue;

            var parent = Children.First(c => c.Name == proto.Category);
            var tooltip = Loc.GetString(proto.Name);

            tooltip = OopsConcat(char.ToUpper(tooltip[0]).ToString(), tooltip.Remove(0, 1));

            var button = new PetControlMenuButton
            {
                StyleClasses = { "RadialMenuButton" },
                SetSize = new Vector2(64f, 64f),
                ToolTip = tooltip,
                ProtoId = protoId,
            };

            if (proto.Sprite != null)
            {
                var tex = new TextureRect
                {
                    VerticalAlignment = VAlignment.Center,
                    HorizontalAlignment = HAlignment.Center,
                    Texture = _sprites.Frame0(proto.Sprite),
                    TextureScale = new Vector2(2f, 2f),
                };

                button.AddChild(tex);
            }

            parent.AddChild(button);

            // Ensure that the button that transitions the menu to the associated category layer
            // is visible in the main radial container (as these all start with Visible = false)
            foreach (var child in main.Children)
            {
                var castChild = child as RadialMenuTextureButton;

                if (castChild is not RadialMenuTextureButton)
                    continue;

                if (castChild.TargetLayer == proto.Category)
                {
                    castChild.Visible = true;
                    break;
                }
            }
        }

        // Set up menu actions
        foreach (var child in Children)
        {
            AddPetControlMenuButtonOnClickActions(child);
        }
    }

    private static string OopsConcat(string a, string b)
    {
        // This exists to prevent Roslyn being clever and compiling something that fails sandbox checks.
        return a + b;
    }

    private void AddPetControlMenuButtonOnClickActions(Control control)
    {
        var radialContainer = control as RadialContainer;

        if (radialContainer == null)
            return;

        foreach (var child in radialContainer.Children)
        {
            var castChild = child as PetControlMenuButton;

            if (castChild == null)
                continue;

            castChild.OnButtonUp += _ =>
            {
                if (!_protoManager.TryIndex(castChild.ProtoId, out var prototype))
                    return;

                SendPetSystemMessageAction?.Invoke(prototype.Event);

                if (_playerManager.LocalSession?.AttachedEntity != null &&
                    _protoManager.TryIndex(castChild.ProtoId, out var proto))
                {
                    var msg = Loc.GetString("pet-change-behaviour", ("behaviour", Loc.GetString(proto.Name)));

                    // Popup message
                    _popup.PopupClient(msg, _owner, _playerManager.LocalSession.AttachedEntity);
                }

                Close();
            };
        }
    }

    private void SetupCategories(RadialContainer main, PettableOnInteractComponent pettable)
    {
        foreach (var categoryId in pettable.AvailableCategoryControls)
        {
            if (!_protoManager.TryIndex(categoryId, out var category))
                continue;

            var button = new RadialMenuTextureButton
            {
                StyleClasses = { "RadialMenuButton" },
                SetSize = new Vector2(64f, 64f),
                ToolTip = Loc.GetString(category.TooltipBase + categoryId), // rcd-component- + WindowsAndGrilles = rcd-component-WindowsAndGrilles
                TargetLayer = categoryId,
                Visible = false,
            };

            var texture = new TextureRect
            {
                VerticalAlignment = VAlignment.Center,
                HorizontalAlignment = HAlignment.Center,
                TextureScale = new Vector2(2, 2),
                Texture = _sprites.Frame0(category.Sprite)
            };

            button.AddChild(texture);
            main.AddChild(button);

            var container = new RadialContainer
            {
                Name = categoryId.ToString(),
                VerticalExpand = true,
                HorizontalExpand = true,
                Radius = 64
            };

            AddChild(container);
        }
    }
}

public sealed class PetControlMenuButton : RadialMenuTextureButton
{
    public ProtoId<PetControlPrototype> ProtoId { get; set; }

    public PetControlMenuButton()
    {

    }
}
